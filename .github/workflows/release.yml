name: Docker build and publish
on:
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
        inputs:
            version:
                description: Build with the given version.
                default: v1.0.0
                required: true
            dey-run:
                description: Build with dey-run.
                default:
                required: false
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

permissions:
    contents: write # needed to write releases
    id-token: write # needed for keyless signing
    packages: write # needed for ghcr access

jobs:
    build-and-push-image:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            #      - name: Install cosign
            #        uses: sigstore/cosign-installer@v2.5.0
            #      - name: Install syft
            #        uses: anchore/sbom-action/download-syft@v0.11.0
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}
                  # password: ${{ secrets.GHCR_PAT }}
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            - name: Build and push Docker image
              uses: docker/build-push-action@v3
              with:
                  context: .
                  push: true
                  platforms: linux/amd64,linux/arm64
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
